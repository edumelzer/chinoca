package br.feevale.applogistica.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import br.feevale.applogistica.database.orm.Motorista;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOTORISTA.
*/
public class MotoristaDao extends AbstractDao<Motorista, Long> {

    public static final String TABLENAME = "MOTORISTA";

    /**
     * Properties of entity Motorista.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_web = new Property(1, Long.class, "id_web", false, "ID_WEB");
        public final static Property Nome = new Property(2, String.class, "nome", false, "NOME");
        public final static Property Placa = new Property(3, String.class, "placa", false, "PLACA");
        public final static Property Dh_sincronismo = new Property(4, String.class, "dh_sincronismo", false, "DH_SINCRONISMO");
    };


    public MotoristaDao(DaoConfig config) {
        super(config);
    }
    
    public MotoristaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOTORISTA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_WEB' INTEGER," + // 1: id_web
                "'NOME' TEXT," + // 2: nome
                "'PLACA' TEXT," + // 3: placa
                "'DH_SINCRONISMO' TEXT);"); // 4: dh_sincronismo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOTORISTA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Motorista entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_web = entity.getId_web();
        if (id_web != null) {
            stmt.bindLong(2, id_web);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(3, nome);
        }
 
        String placa = entity.getPlaca();
        if (placa != null) {
            stmt.bindString(4, placa);
        }
 
        String dh_sincronismo = entity.getDh_sincronismo();
        if (dh_sincronismo != null) {
            stmt.bindString(5, dh_sincronismo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Motorista readEntity(Cursor cursor, int offset) {
        Motorista entity = new Motorista( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_web
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nome
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // placa
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // dh_sincronismo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Motorista entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_web(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlaca(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDh_sincronismo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Motorista entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Motorista entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
