package br.feevale.applogistica.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import br.feevale.applogistica.database.orm.Produtos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUTOS.
*/
public class ProdutosDao extends AbstractDao<Produtos, Long> {

    public static final String TABLENAME = "PRODUTOS";

    /**
     * Properties of entity Produtos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_entrega = new Property(1, Integer.class, "id_entrega", false, "ID_ENTREGA");
        public final static Property Descricao = new Property(2, String.class, "descricao", false, "DESCRICAO");
        public final static Property Especie = new Property(3, String.class, "especie", false, "ESPECIE");
        public final static Property Valor = new Property(4, Long.class, "valor", false, "VALOR");
        public final static Property Sscc = new Property(5, String.class, "sscc", false, "SSCC");
        public final static Property Dh_leitura = new Property(6, java.util.Date.class, "dh_leitura", false, "DH_LEITURA");
        public final static Property Dh_sincronismo = new Property(7, String.class, "dh_sincronismo", false, "DH_SINCRONISMO");
    };


    public ProdutosDao(DaoConfig config) {
        super(config);
    }
    
    public ProdutosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUTOS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_ENTREGA' INTEGER," +       // 1: id_entrega
                "'DESCRICAO' TEXT NOT NULL ," + // 2: descricao
                "'ESPECIE' TEXT," +             // 3: especie
                "'VALOR' INTEGER," +            // 4: valor
                "'SSCC' TEXT," +                // 5: sscc
                "'DH_LEITURA' INTEGER," +       // 6: dh_leitura
                "'DH_SINCRONISMO' TEXT);");     // 7: dh_sincronismo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUTOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Produtos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer id_entrega = entity.getId_entrega();
        if (id_entrega != null) {
            stmt.bindLong(2, id_entrega);
        }
        stmt.bindString(3, entity.getDescricao());
 
        String especie = entity.getEspecie();
        if (especie != null) {
            stmt.bindString(4, especie);
        }
 
        Long valor = entity.getValor();
        if (valor != null) {
            stmt.bindLong(5, valor);
        }
 
        String sscc = entity.getSscc();
        if (sscc != null) {
            stmt.bindString(6, sscc);
        }
 
        java.util.Date dh_leitura = entity.getDh_leitura();
        if (dh_leitura != null) {
            stmt.bindLong(7, dh_leitura.getTime());
        }
 
        String dh_sincronismo = entity.getDh_sincronismo();
        if (dh_sincronismo != null) {
            stmt.bindString(8, dh_sincronismo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Produtos readEntity(Cursor cursor, int offset) {
        Produtos entity = new Produtos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id_entrega
            cursor.getString(offset + 2), // descricao
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // especie
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // valor
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sscc
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dh_leitura
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // dh_sincronismo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Produtos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_entrega(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDescricao(cursor.getString(offset + 2));
        entity.setEspecie(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValor(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSscc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDh_leitura(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDh_sincronismo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Produtos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Produtos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
