package br.feevale.applogistica.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import br.feevale.applogistica.database.orm.Clientes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLIENTES.
*/
public class ClientesDao extends AbstractDao<Clientes, Long> {

    public static final String TABLENAME = "CLIENTES";

    /**
     * Properties of entity Clientes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Razao_social = new Property(1, String.class, "razao_social", false, "RAZAO_SOCIAL");
        public final static Property Fantasia = new Property(2, String.class, "fantasia", false, "FANTASIA");
        public final static Property Logradouro = new Property(3, String.class, "logradouro", false, "LOGRADOURO");
        public final static Property Numero = new Property(4, Integer.class, "numero", false, "NUMERO");
        public final static Property Complemento = new Property(5, String.class, "complemento", false, "COMPLEMENTO");
        public final static Property Bairro = new Property(6, String.class, "bairro", false, "BAIRRO");
        public final static Property Cidade = new Property(7, String.class, "cidade", false, "CIDADE");
        public final static Property Uf = new Property(8, String.class, "uf", false, "UF");
        public final static Property Cep = new Property(9, String.class, "cep", false, "CEP");
        public final static Property Latitude = new Property(10, Long.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(11, Long.class, "longitude", false, "LONGITUDE");
    };


    public ClientesDao(DaoConfig config) {
        super(config);
    }
    
    public ClientesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RAZAO_SOCIAL' TEXT," + // 1: razao_social
                "'FANTASIA' TEXT," + // 2: fantasia
                "'LOGRADOURO' TEXT," + // 3: logradouro
                "'NUMERO' INTEGER," + // 4: numero
                "'COMPLEMENTO' TEXT," + // 5: complemento
                "'BAIRRO' TEXT," + // 6: bairro
                "'CIDADE' TEXT," + // 7: cidade
                "'UF' TEXT," + // 8: uf
                "'CEP' TEXT," + // 9: cep
                "'LATITUDE' INTEGER," + // 10: latitude
                "'LONGITUDE' INTEGER);"); // 11: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Clientes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String razao_social = entity.getRazao_social();
        if (razao_social != null) {
            stmt.bindString(2, razao_social);
        }
 
        String fantasia = entity.getFantasia();
        if (fantasia != null) {
            stmt.bindString(3, fantasia);
        }
 
        String logradouro = entity.getLogradouro();
        if (logradouro != null) {
            stmt.bindString(4, logradouro);
        }
 
        Integer numero = entity.getNumero();
        if (numero != null) {
            stmt.bindLong(5, numero);
        }
 
        String complemento = entity.getComplemento();
        if (complemento != null) {
            stmt.bindString(6, complemento);
        }
 
        String bairro = entity.getBairro();
        if (bairro != null) {
            stmt.bindString(7, bairro);
        }
 
        String cidade = entity.getCidade();
        if (cidade != null) {
            stmt.bindString(8, cidade);
        }
 
        String uf = entity.getUf();
        if (uf != null) {
            stmt.bindString(9, uf);
        }
 
        String cep = entity.getCep();
        if (cep != null) {
            stmt.bindString(10, cep);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(11, latitude);
        }
 
        Long longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindLong(12, longitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Clientes readEntity(Cursor cursor, int offset) {
        Clientes entity = new Clientes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // razao_social
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fantasia
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logradouro
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // numero
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // complemento
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bairro
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cidade
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uf
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cep
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // latitude
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Clientes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRazao_social(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFantasia(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogradouro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumero(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setComplemento(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBairro(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCidade(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUf(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCep(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLatitude(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Clientes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Clientes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
