package br.feevale.applogistica.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import br.feevale.applogistica.database.orm.Entregas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTREGAS.
*/
public class EntregasDao extends AbstractDao<Entregas, Long> {

    public static final String TABLENAME = "ENTREGAS";

    /**
     * Properties of entity Entregas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_cliente = new Property(1, int.class, "id_cliente", false, "ID_CLIENTE");
        public final static Property Id_motorista = new Property(2, int.class, "id_motorista", false, "ID_MOTORISTA");
        public final static Property Ordem = new Property(3, Integer.class, "ordem", false, "ORDEM");
        public final static Property Dh_maxima = new Property(4, java.util.Date.class, "dh_maxima", false, "DH_MAXIMA");
        public final static Property Gln = new Property(5, String.class, "gln", false, "GLN");
        public final static Property Melhor_rota = new Property(6, String.class, "melhor_rota", false, "MELHOR_ROTA");
        public final static Property Volumes = new Property(7, Integer.class, "volumes", false, "VOLUMES");
        public final static Property Nome_contato = new Property(8, String.class, "nome_contato", false, "NOME_CONTATO");
        public final static Property Telefone = new Property(9, String.class, "telefone", false, "TELEFONE");
        public final static Property Dh_entrega = new Property(10, String.class, "dh_entrega", false, "DH_ENTREGA");
        public final static Property Imagem_documento = new Property(11, String.class, "imagem_documento", false, "IMAGEM_DOCUMENTO");
        public final static Property Dh_sincronismo = new Property(12, String.class, "dh_sincronismo", false, "DH_SINCRONISMO");
    };


    public EntregasDao(DaoConfig config) {
        super(config);
    }
    
    public EntregasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTREGAS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_CLIENTE' INTEGER NOT NULL ," + // 1: id_cliente
                "'ID_MOTORISTA' INTEGER NOT NULL ," + // 2: id_motorista
                "'ORDEM' INTEGER," + // 3: ordem
                "'DH_MAXIMA' INTEGER," + // 4: dh_maxima
                "'GLN' TEXT," + // 5: gln
                "'MELHOR_ROTA' TEXT," + // 6: melhor_rota
                "'VOLUMES' INTEGER," + // 7: volumes
                "'NOME_CONTATO' TEXT," + // 8: nome_contato
                "'TELEFONE' TEXT," + // 9: telefone
                "'DH_ENTREGA' TEXT," + // 10: dh_entrega
                "'IMAGEM_DOCUMENTO' TEXT," + // 11: imagem_documento
                "'DH_SINCRONISMO' TEXT);"); // 12: dh_sincronismo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTREGAS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Entregas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getId_cliente());
        stmt.bindLong(3, entity.getId_motorista());
 
        Integer ordem = entity.getOrdem();
        if (ordem != null) {
            stmt.bindLong(4, ordem);
        }
 
        java.util.Date dh_maxima = entity.getDh_maxima();
        if (dh_maxima != null) {
            stmt.bindLong(5, dh_maxima.getTime());
        }
 
        String gln = entity.getGln();
        if (gln != null) {
            stmt.bindString(6, gln);
        }
 
        String melhor_rota = entity.getMelhor_rota();
        if (melhor_rota != null) {
            stmt.bindString(7, melhor_rota);
        }
 
        Integer volumes = entity.getVolumes();
        if (volumes != null) {
            stmt.bindLong(8, volumes);
        }
 
        String nome_contato = entity.getNome_contato();
        if (nome_contato != null) {
            stmt.bindString(9, nome_contato);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(10, telefone);
        }
 
        String dh_entrega = entity.getDh_entrega();
        if (dh_entrega != null) {
            stmt.bindString(11, dh_entrega);
        }
 
        String imagem_documento = entity.getImagem_documento();
        if (imagem_documento != null) {
            stmt.bindString(12, imagem_documento);
        }
 
        String dh_sincronismo = entity.getDh_sincronismo();
        if (dh_sincronismo != null) {
            stmt.bindString(13, dh_sincronismo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Entregas readEntity(Cursor cursor, int offset) {
        Entregas entity = new Entregas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // id_cliente
            cursor.getInt(offset + 2), // id_motorista
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ordem
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // dh_maxima
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gln
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // melhor_rota
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // volumes
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nome_contato
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telefone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dh_entrega
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // imagem_documento
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // dh_sincronismo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Entregas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_cliente(cursor.getInt(offset + 1));
        entity.setId_motorista(cursor.getInt(offset + 2));
        entity.setOrdem(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDh_maxima(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setGln(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMelhor_rota(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVolumes(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNome_contato(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelefone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDh_entrega(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImagem_documento(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDh_sincronismo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Entregas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Entregas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
