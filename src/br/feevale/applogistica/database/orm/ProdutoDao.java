package br.feevale.applogistica.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import br.feevale.applogistica.database.orm.Produto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUTO.
*/
public class ProdutoDao extends AbstractDao<Produto, Long> {

    public static final String TABLENAME = "PRODUTO";

    /**
     * Properties of entity Produto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_web = new Property(1, Long.class, "id_web", false, "ID_WEB");
        public final static Property Id_entrega = new Property(2, Integer.class, "id_entrega", false, "ID_ENTREGA");
        public final static Property Descricao = new Property(3, String.class, "descricao", false, "DESCRICAO");
        public final static Property Especie = new Property(4, String.class, "especie", false, "ESPECIE");
        public final static Property Valor = new Property(5, Long.class, "valor", false, "VALOR");
        public final static Property Sscc = new Property(6, String.class, "sscc", false, "SSCC");
        public final static Property Dh_leitura = new Property(7, String.class, "dh_leitura", false, "DH_LEITURA");
        public final static Property Dh_sincronismo = new Property(8, String.class, "dh_sincronismo", false, "DH_SINCRONISMO");
    };


    public ProdutoDao(DaoConfig config) {
        super(config);
    }
    
    public ProdutoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_WEB' INTEGER," + // 1: id_web
                "'ID_ENTREGA' INTEGER," + // 2: id_entrega
                "'DESCRICAO' TEXT," + // 3: descricao
                "'ESPECIE' TEXT," + // 4: especie
                "'VALOR' INTEGER," + // 5: valor
                "'SSCC' TEXT," + // 6: sscc
                "'DH_LEITURA' TEXT," + // 7: dh_leitura
                "'DH_SINCRONISMO' TEXT);"); // 8: dh_sincronismo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Produto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_web = entity.getId_web();
        if (id_web != null) {
            stmt.bindLong(2, id_web);
        }
 
        Integer id_entrega = entity.getId_entrega();
        if (id_entrega != null) {
            stmt.bindLong(3, id_entrega);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(4, descricao);
        }
 
        String especie = entity.getEspecie();
        if (especie != null) {
            stmt.bindString(5, especie);
        }
 
        Long valor = entity.getValor();
        if (valor != null) {
            stmt.bindLong(6, valor);
        }
 
        String sscc = entity.getSscc();
        if (sscc != null) {
            stmt.bindString(7, sscc);
        }
 
        String dh_leitura = entity.getDh_leitura();
        if (dh_leitura != null) {
            stmt.bindString(8, dh_leitura);
        }
 
        String dh_sincronismo = entity.getDh_sincronismo();
        if (dh_sincronismo != null) {
            stmt.bindString(9, dh_sincronismo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Produto readEntity(Cursor cursor, int offset) {
        Produto entity = new Produto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_web
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // id_entrega
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descricao
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // especie
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // valor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sscc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dh_leitura
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // dh_sincronismo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Produto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_web(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId_entrega(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescricao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEspecie(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValor(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSscc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDh_leitura(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDh_sincronismo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Produto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Produto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
